<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <subtitle>看。  那海中的星辰</subtitle>
  <link href="https://blog.infox.ren/atom.xml" rel="self"/>
  
  <link href="https://blog.infox.ren/"/>
  <updated>2025-01-16T14:58:09.043Z</updated>
  <id>https://blog.infox.ren/</id>
  
  <author>
    <name>宣纸</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Debian 系统安装</title>
    <link href="https://blog.infox.ren/2024/03/14/debian-setup/"/>
    <id>https://blog.infox.ren/2024/03/14/debian-setup/</id>
    <published>2024-03-14T11:40:00.000Z</published>
    <updated>2025-01-16T14:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<p>Debian 系统安装信息备忘, F2 进入BIOS，F10 快捷启动</p><hr><h2 id="分区方案"><a href="#分区方案" class="headerlink" title="分区方案"></a>分区方案</h2><p><img src="/linux_partitation.png" alt="分区"></p><h2 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 vim, sudo, git</span></span><br><span class="line">apt-get install vim git zsh sudo -y</span><br><span class="line"><span class="comment"># setup sudo</span></span><br><span class="line">sudo usermod -aG sudo &lt;username&gt;</span><br><span class="line"></span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br><span class="line"><span class="comment"># install oh-my-zsh</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/network/interfaces start</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"><span class="comment"># The primary network interface</span></span><br><span class="line">allow-hotplug enp88s0</span><br><span class="line">auto enp88s0</span><br><span class="line">iface enp88s0 inet static</span><br><span class="line">address 192.168.68.254/24</span><br><span class="line">gateway 192.168.68.253</span><br><span class="line"><span class="comment"># dns-* options are implemented by the resolvconf package, if installed</span></span><br><span class="line">dns-nameservers 223.6.6.6 8.8.8.8</span><br><span class="line">dns-search lan</span><br><span class="line"></span><br><span class="line">iface enp88s0 inet6 auto</span><br><span class="line"><span class="comment"># /etc/network/interfaces end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ipv4优先 /etc/gai.conf, 取消注释 precedence ::ffff:0:0/96  100</span></span><br><span class="line">sudo /etc/init.d/networking restart</span><br><span class="line"></span><br><span class="line">sudo apt install resolvconf</span><br><span class="line"><span class="comment">## /etc/resolvconf/resolv.conf.d/head</span></span><br><span class="line">nameserver 1.1.1.1</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line"><span class="comment">## 生效</span></span><br><span class="line">sudo resolvconf -u</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 TRIM (SSD 优化)</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> fstrim.timer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置防火墙</span></span><br><span class="line">sudo apt install ufw -y</span><br><span class="line">sudo ufw allow from 192.168.8.0/24 proto tcp to any port 2222</span><br><span class="line">sudo ufw <span class="built_in">enable</span>         <span class="comment"># 启用防火墙</span></span><br></pre></td></tr></table></figure><h2 id="UPS-配置"><a href="#UPS-配置" class="headerlink" title="UPS 配置"></a>UPS 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 安装 NUT</span></span><br><span class="line">sudo apt install nut -y</span><br><span class="line">dpkg -l | grep nut</span><br><span class="line">lsusb <span class="comment"># 查看 usb 设备</span></span><br><span class="line"><span class="comment"># 2. 配置 UPS 驱动</span></span><br><span class="line">sudo vim /etc/nut/ups.conf</span><br><span class="line"></span><br><span class="line">[santak]</span><br><span class="line">    driver = usbhid-ups</span><br><span class="line">    port = auto</span><br><span class="line">    desc = <span class="string">&quot;Santak UPS&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 配置 UPS 服务</span></span><br><span class="line">sudo vim /etc/nut/upsd.conf</span><br><span class="line"></span><br><span class="line">LISTEN 127.0.0.1 3493</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 配置 UPS 用户</span></span><br><span class="line">sudo vim /etc/nut/upsd.users</span><br><span class="line"></span><br><span class="line">[admin]</span><br><span class="line">    password = 12345678</span><br><span class="line">    actions = SET</span><br><span class="line">    instcmds = ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 配置 UPS 自动关机</span></span><br><span class="line">sudo vim /etc/nut/upsmon.conf</span><br><span class="line"></span><br><span class="line">MONITOR santak@localhost 1 admin yourpassword primary </span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 配置 NUT 运行模式</span></span><br><span class="line">sudo vim /etc/nut/nut.conf</span><br><span class="line"></span><br><span class="line">MODE=standalone</span><br><span class="line"><span class="comment"># 7. 启动 NUT 服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nut-server</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nut-monitor</span><br><span class="line">sudo systemctl start nut-server</span><br><span class="line">sudo systemctl start nut-monitor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 测试服务,以下命令可以查看到ups状态信息</span></span><br><span class="line">upsc santak@localhost </span><br></pre></td></tr></table></figure><h2 id="磁盘优化"><a href="#磁盘优化" class="headerlink" title="磁盘优化"></a>磁盘优化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSD 优化</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> fstrim.timer</span><br><span class="line">sudo systemctl start fstrim.timer</span><br><span class="line"></span><br><span class="line"><span class="comment"># HD 优化</span></span><br><span class="line">sudo apt install hdparm -y</span><br><span class="line"><span class="comment"># 查看硬盘基本信息</span></span><br><span class="line">sudo hdparm -I /dev/sda1</span><br><span class="line"><span class="comment"># 启用硬盘的高效读取模式</span></span><br><span class="line">sudo hdparm -W1 /dev/sda1</span><br><span class="line"><span class="comment"># 启用硬盘的电源管理</span></span><br><span class="line">sudo hdparm -B 254 /dev/sda1</span><br><span class="line">sudo hdparm -A1 /dev/sda1</span><br><span class="line">sudo hdparm -S 120 /dev/sda1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 健康检查工具安装</span></span><br><span class="line">sudo apt install smartmontools -y</span><br><span class="line">sudo smartctl -a /dev/sda1</span><br><span class="line"></span><br><span class="line">sudo systemctl start smartd</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">cat</span> /var/log/smartd.log</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">debian 系统安装，UPS配置</summary>
    
    
    
    <category term="linux" scheme="https://blog.infox.ren/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>git 手册备忘</title>
    <link href="https://blog.infox.ren/2023/03/21/git-tools/"/>
    <id>https://blog.infox.ren/2023/03/21/git-tools/</id>
    <published>2023-03-21T02:40:00.000Z</published>
    <updated>2025-01-16T14:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<p>快速索引命令行</p><hr><h2 id="比较分支差异"><a href="#比较分支差异" class="headerlink" title="比较分支差异"></a>比较分支差异</h2><p>需要检查 upstream 和 head 提交的差异，+ 表示需要 check， &#x3D; 表示两个分支都存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --cherry [upstream]...[<span class="built_in">head</span>] --after=<span class="string">&quot;2023-01-01 01:00&quot;</span> --author=[an] --oneline</span><br><span class="line">该命令等价于</span><br><span class="line">git cherry upstream mybranch</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">工作中常用的 git 命令速查速记</summary>
    
    
    
    
    <category term="work" scheme="https://blog.infox.ren/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>WireGuard 配置</title>
    <link href="https://blog.infox.ren/2022/07/23/wireguard-guide-md/"/>
    <id>https://blog.infox.ren/2022/07/23/wireguard-guide-md/</id>
    <published>2022-07-23T05:32:22.000Z</published>
    <updated>2025-01-16T14:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<p>最近在进行家庭网络改造时，有需要随时可以访问家庭局域网的需求，因而学习如何配置 WireGuard 。。。</p><hr><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>家庭网络中 debian 作为服务器，个人 mac 作为客户端进行连接。 注：WireGuard 是对等VPN，不使用C&#x2F;S模型。</p><h3 id="debian-安装-WireGuard"><a href="#debian-安装-WireGuard" class="headerlink" title="debian 安装 WireGuard"></a>debian 安装 WireGuard</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install wireguard</span><br></pre></td></tr></table></figure><h3 id="mac-安装-WireGuard"><a href="#mac-安装-WireGuard" class="headerlink" title="mac 安装 WireGuard"></a>mac 安装 WireGuard</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install wireguard-tools</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>wg</code>和<code>wg-quick</code>命令行可以快速配置和管理WG网络。 WG网络中的每个设备[peer]都需要具有公钥[publickey]和私钥[privatekey]；预共享密钥[sharekey]对于整个网络是可选项，预共享密钥只需要生成一次，然后每个设备的预共享密钥是相同的。</p><h3 id="配置-debian"><a href="#配置-debian" class="headerlink" title="配置 debian"></a>配置 debian</h3><ol><li><p>创建配置密钥</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wg genkey | <span class="built_in">tee</span> /etc/wireguard/privatekey | wg pubkey &gt; /etc/wireguard/publickey</span><br><span class="line">wg genpsk &gt; /etc/wireguard/sharekey <span class="comment"># opt</span></span><br><span class="line">sudo vim /etc/wireguard/wg0.conf</span><br></pre></td></tr></table></figure><p> 复制以下内容到 <code>/etc/wireguard/wg0.conf</code>文件中，<strong>注意替换 <code>ens192</code></strong></p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">Address = 10.0.0.1/24</span><br><span class="line">ListenPort = 51820</span><br><span class="line">PrivateKey = &#123;&#123;SERVER_PRIVATE_KEY&#125;&#125;  </span><br><span class="line">SaveConfig = true</span><br><span class="line">PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens192 -j MASQUERADE</span><br><span class="line">PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens192 -j MASQUERADE</span><br><span class="line">[Peer]</span><br><span class="line">PresharedKey = &#123;&#123;sharekey&#125;&#125;</span><br></pre></td></tr></table></figure><p> Interface 就是定义了当前设备在网络中的 <code>Address</code> 和 <code>ListenPort</code>, SERVER_PRIVATE_KEY 是前面生成的 privatekey。<br> 替换<code>ens192</code>的字符串可以通过 <code>ip -o -4 route show to default | awk &#39;&#123;print $5&#125;&#39;</code>查找到当前联网的接口。</p></li><li><p>启动服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wg-quick up wg0</span><br></pre></td></tr></table></figure><p> 该命令显示信息</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">[#</span><span class="language-bash">] ip <span class="built_in">link</span> add wg0 <span class="built_in">type</span> wireguard</span></span><br><span class="line"><span class="meta prompt_">[#</span><span class="language-bash">] wg setconf wg0 /dev/fd/63</span></span><br><span class="line"><span class="meta prompt_">[#</span><span class="language-bash">] ip -4 address add 10.0.0.1/24 dev wg0</span></span><br><span class="line"><span class="meta prompt_">[#</span><span class="language-bash">] ip <span class="built_in">link</span> <span class="built_in">set</span> mtu 1420 up dev wg0</span></span><br><span class="line"><span class="meta prompt_">[#</span><span class="language-bash">] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o ens192 -j MASQUERADE</span></span><br></pre></td></tr></table></figure></li><li><p>检查服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wg show wg0</span><br></pre></td></tr></table></figure><p> 该命令显示信息</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface: wg0</span><br><span class="line">public key: ****************</span><br><span class="line">private key: (hidden)</span><br><span class="line">listening port: 51820</span><br></pre></td></tr></table></figure></li><li><p>设置开机自启动</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> wg-quick@wg0</span><br></pre></td></tr></table></figure></li><li><p>配置IP转发</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p> 添加或者取消注释</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p> 然后启动属性</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置-mbp"><a href="#配置-mbp" class="headerlink" title="配置 mbp"></a>配置 mbp</h3><ol><li><p>生成公私钥</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wg genkey | <span class="built_in">tee</span> /etc/wireguard/privatekey | wg pubkey &gt; /etc/wireguard/publickey</span><br><span class="line">sudo vim /etc/wireguard/wg0.conf</span><br></pre></td></tr></table></figure><p> 添加以下内容</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey = CLIENT_PRIVATE_KEY #mbp生成的私钥</span><br><span class="line">Address = 10.0.0.2/24</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = SERVER_PUBLIC_KEY  # debian端生成的公钥</span><br><span class="line">Endpoint = SERVER_IP_ADDRESS:51820 # debian 对应的公网ip</span><br><span class="line">PresharedKey = sharekey  # debian 端生成的预共享密钥</span><br><span class="line">AllowedIPs = 0.0.0.0/0</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wg-quick up wg0</span><br></pre></td></tr></table></figure></li></ol><h3 id="将mbp加入到debian中"><a href="#将mbp加入到debian中" class="headerlink" title="将mbp加入到debian中"></a>将mbp加入到debian中</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wg <span class="built_in">set</span> wg0 peer CLIENT_PUBLIC_KEY allowed-ips 10.0.0.2</span><br></pre></td></tr></table></figure><h3 id="关闭WG"><a href="#关闭WG" class="headerlink" title="关闭WG"></a>关闭WG</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wg-quick down wg0</span><br></pre></td></tr></table></figure><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>  在 mbp 和 debian 中将文件权限设置正确</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 600 /etc/wireguard/&#123;privatekey,wg0.conf&#125;</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li>debian 和 mbp 的WG都正常启动，相互之间可以ping到对方，但是无法正常上网.<br>解决方法：debian 和 mbp 都可以ping到对方，说明WG网络建立完成，无法上网原因很可能是 debian 端 ip转发 不成功。<ol><li>首先通过<code>sysctl net.ipv4.ip_forward</code>检查 ip转发是否开启，如果等于 1 说明已经开启，否则 <code>sysctl net.ipv4.ip_forward=1</code> 来临时开启。</li><li>通过<code>sudo iptables -t filter -L FORWARD</code>检查policy是否为<em>ACCEPT</em>，如果policy是<em>DROP</em>，则根据前文配置<strong>ip转发</strong>后重启机器，再检查policy状态。</li></ol></li></ul>]]></content>
    
    
    <summary type="html">WireGuard 配置说明</summary>
    
    
    
    <category term="tool" scheme="https://blog.infox.ren/categories/tool/"/>
    
    
    <category term="work" scheme="https://blog.infox.ren/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>linux 常用命令</title>
    <link href="https://blog.infox.ren/2021/07/04/linux-sys/"/>
    <id>https://blog.infox.ren/2021/07/04/linux-sys/</id>
    <published>2021-07-04T08:30:00.000Z</published>
    <updated>2025-01-16T14:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul><li><p>grep 文本内容查找命令</p></li><li><p>find 查找文件所在位置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name FILE_NAME</span><br></pre></td></tr></table></figure></li><li><p>uptime 查看机器启动时间，登陆用户，平均负载等情况 [平均负载指特定时间内队列中运行的平均进程数，一般每个CPU内核对应的活动进程数不大于3个，认为系统运行正常]</p></li><li><p>lsof 列出系统当前打开的文件句柄</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -p &lt;pid&gt;  <span class="comment"># 查看进程打开的句柄</span></span><br><span class="line">lsof -i:8080  <span class="comment"># 查看某个端口的使用方式</span></span><br></pre></td></tr></table></figure></li><li><p>ulimit linux系统对每一个登陆的用户都限制其最大进程数和打开的最大文件句柄数，可以根据硬件资源进行自定义设置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a <span class="comment"># 显示当前系统对用户使用资源的限制</span></span><br></pre></td></tr></table></figure></li><li><p>curl HTTP调用工具</p></li><li><p>scp 文件传输命令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp user@ip:path <span class="built_in">local</span></span><br></pre></td></tr></table></figure></li><li><p>dos2unix, unix2dos 常用的win和unix的换行符转换工具</p></li><li><p>ps 显示系统内的所有进程</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -elf</span><br></pre></td></tr></table></figure></li><li><p>top 实时查看活动进程的 CPU 和内存信息</p></li><li><p>pidstat 监控全部或指定进程占用系统资源的情况，包括 CPU， 内存， 磁盘 I&#x2F;O， 线程切换，线程数等情况</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pidstat -u -p 2002 <span class="comment"># CPU情况</span></span><br><span class="line">pidstat -r -p 2962 <span class="comment"># 内存情况</span></span><br><span class="line">pidstat -d -p 2002 <span class="comment"># 磁盘情况</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="针对内存"><a href="#针对内存" class="headerlink" title="针对内存"></a>针对内存</h2><ul><li>free 显示系统的内存使用情况</li><li>pmap 报告进程中各个模块占用内存的具体情况，用于定位深层次的内存问题</li></ul><h2 id="针对-CPU"><a href="#针对-CPU" class="headerlink" title="针对 CPU"></a>针对 CPU</h2><ul><li><p>vmstat 显示关于内核进程，虚拟内存，磁盘IO，陷阱和CPU占用率的统计信息</p><ul><li>buff 是 IO 系统存储的磁盘块文件的元数据的统计信息</li><li>cache 是操作系统用来缓存磁盘数据的缓冲区，操作系统会自动调节这个参数保障进程可用</li><li>cs 表示线程环境的切换次数，此数据过大时说明线程的同步机制有问题</li><li>si和so较大时，说明系统在频繁使用交换区，应该查看系统内存是否够用</li><li>bi和bo表示IO活动，根据其大小可知道磁盘IO的负载情况</li></ul></li><li><p>mpstat 实时监控系统CPU的统计信息</p></li></ul><h2 id="监控磁盘IO的命令"><a href="#监控磁盘IO的命令" class="headerlink" title="监控磁盘IO的命令"></a>监控磁盘IO的命令</h2><ul><li><p>iostat 监控CPU占用率，平均负载值及IO读写速度等</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat -x</span><br></pre></td></tr></table></figure></li><li><p>swapon 查看交换分区的使用情况</p></li><li><p>df 查看文件系统的硬盘挂载点和空间使用情况</p></li></ul><h2 id="查看网络及监控"><a href="#查看网络及监控" class="headerlink" title="查看网络及监控"></a>查看网络及监控</h2><ul><li><p>ifconfig 显示挂载的网卡情况</p></li><li><p>ping 检测网络故障</p></li><li><p>telnet 远程登陆服务的标准协议</p></li><li><p>nc 网络模拟调试工具</p></li><li><p>mtr 网络连通性测试</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtr -r baidu.com <span class="comment"># 检测丢包率</span></span><br></pre></td></tr></table></figure></li><li><p>nslookup 检测网络中的dns服务器是否能正确解析域名</p></li><li><p>traceroute 提供从用户机到服务机的路径</p></li><li><p>sar 可以输出每秒的网卡存取速度，适合线上排查问题时使用</p></li><li><p>netstat 显示网络连接，端口信息等</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -elf | grep 进程  <span class="comment"># 根据进程名查找进程ID</span></span><br><span class="line">netstat -nap | grep 2002  <span class="comment"># 根据进程 ID 或端口查找进程开启的端口</span></span><br></pre></td></tr></table></figure></li><li><p>iptraf 实时监控网络流量的交互式的界面</p></li><li><p>tcpdump 网络状况分析和跟踪的工具，可以用来抓包</p></li><li><p>nmap 扫描机器打开的端口和端口提供的服务信息</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -v -A localhost</span><br></pre></td></tr></table></figure></li></ul><h2 id="高级工具"><a href="#高级工具" class="headerlink" title="高级工具"></a>高级工具</h2><ul><li><p>pstack 显示每个进程的本地调用栈</p></li><li><p>strace 监控应用所使用的系统调用</p></li><li><p>&#x2F;proc 信息</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/cpuinfo   <span class="comment"># cpu信息</span></span><br><span class="line"><span class="built_in">cat</span> /proc/meminfo   <span class="comment"># 内存信息</span></span><br><span class="line"><span class="built_in">cat</span> /proc/zoneinfo  <span class="comment"># 详细的内存映射信息</span></span><br><span class="line"><span class="built_in">cat</span> /proc/mounts    <span class="comment"># 磁盘映射信息</span></span><br><span class="line"><span class="built_in">cat</span> /proc/loadavg   <span class="comment"># 平均负载均衡</span></span><br></pre></td></tr></table></figure></li><li><p>摘要信息</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md5sum</span> file</span><br><span class="line"><span class="built_in">sha256sum</span> file</span><br><span class="line"><span class="built_in">base64</span> file</span><br></pre></td></tr></table></figure></li></ul><h2 id="gdisk"><a href="#gdisk" class="headerlink" title="gdisk"></a>gdisk</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdisk /dev/sda</span><br><span class="line">b</span><br><span class="line">v</span><br><span class="line">b</span><br><span class="line">w</span><br><span class="line">y</span><br></pre></td></tr></table></figure><h2 id="smartctl"><a href="#smartctl" class="headerlink" title="smartctl"></a>smartctl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install smartmontools</span><br><span class="line"><span class="comment">### 查看是否支持</span></span><br><span class="line">smartctl -i /dev/sda</span><br><span class="line"><span class="comment">### 查看健康情况</span></span><br><span class="line">smartctl -H /dev/sda</span><br><span class="line"><span class="comment">## 查看详细情况</span></span><br><span class="line">smartctl -A /dev/sda</span><br></pre></td></tr></table></figure><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><h3 id="网速测试"><a href="#网速测试" class="headerlink" title="网速测试"></a>网速测试</h3><ul><li><p>iperf3 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># host 命令</span></span><br><span class="line">iperf3 -s</span><br><span class="line"><span class="comment"># client 命令</span></span><br><span class="line">iperf3 -c &lt;ip&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/../images/linux-sys/linux_performance_tools.PNG" alt="linux performace tools"></p>]]></content>
    
    
    <summary type="html">linux 系统下常用命令速记 [debian 系统]</summary>
    
    
    
    <category term="os" scheme="https://blog.infox.ren/categories/os/"/>
    
    
    <category term="work" scheme="https://blog.infox.ren/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 概念初识</title>
    <link href="https://blog.infox.ren/2020/03/14/kubernetes-concepts/"/>
    <id>https://blog.infox.ren/2020/03/14/kubernetes-concepts/</id>
    <published>2020-03-14T11:40:00.000Z</published>
    <updated>2025-01-16T14:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<p>快速索引命令行，对k8s的概念的快速了解</p><hr><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul><li>Master: 集群控制节点，其中的资源存储在etcd中<ul><li>kube-apiserver: CRUD 所有资源的唯一入口</li><li>kube-controller-manager: 资源的自动化控制中心</li><li>kube-scheduler: 负责资源调度的进程</li></ul></li><li>Node: 工作负载节点<ul><li>kubelet: 负责 Pod 对应的容器的创建，启停，实现集群管理的基本功能</li><li>kube-proxy: 实现 Kubernetes Service 的通信与负载均衡机制的重要组件</li><li>Docker Engine: 负责本机的容器管理工作</li></ul></li><li>Pod: 基本的业务单元，每个Pod中都有一个特殊的“根容器”- Pause 容器。 1. 通过 Pause 容器代表整个 Pod 的状态。2. 多个业务容器共享 Pause 容器的 IP 和 Volume，简化业务容器间的通讯和文件共享。 静态 Pod存在于某个具体 Node 的文件中；普通 Pod存储于etcd中，由 Master 进行调度。<ul><li>Endpoint: Pod IP + 容器 Port 的形式存在， 1个 Pod 存在0到多个。</li><li>资源配额限制: Requests 是最小申请量， Limis 是最大允许使用量，尝试超出则进行重启。<ul><li>CPU: 100~300m 等价于 0.1 ~ 0.3 个 CPU。绝对值配额。</li><li>Memory: 单位是内存字节数。</li></ul></li></ul></li><li>Label: key&#x3D;value 的键值对，可以附加于各种资源对象上，实现分组管理功能。查询筛选需要使用 Label Selector 表达式来实现对象查询。</li><li>Selector: matchLabels 和 matchExpressions 同时设置时条件为 AND，则需要两者同时满足才能命中。<ul><li>matchLabels: 匹配定义的一组 label</li><li>matchExpressions: 基于集合的筛选条件</li></ul></li><li>Replication Controller: 简称 RC，定义期望的场景。 注意：删除 RC 不会影响已经创建的Pod，可以设置 replicas&#x3D;0 来删除 Pod。也可以使用 stop 和 delete 命令一次性删除 RC 和其控制的所有 Pod。 <em>Rolling Update 是每停止一个旧的Pod，同时创建一个新的 Pod的形式进行替换升级。</em> <code>下一代的RC: Replica Set，区别是可以支持集合的 Label Selector。</code><ul><li>Pod 期望的副本数量</li><li>用于筛选目标 Pod 的 Label Selector</li><li>创建新的 Pod 的 Pod 模版</li></ul></li><li>Deployment: 使用 Replica Set 来实现，可以认为是 RC 的一次升级。</li><li>HorizontalPodAutoscaler:</li><li>StatefulSet:</li><li>Service: 指代微服务架构中的一个微服务。</li><li>Job:</li><li>Volume:<ul><li>emptyDir: 生命周期和pod的生命周期相同，用于临时空间</li><li>hostPath: 为Pod挂载宿主机的文件或目录，注意k8s无法管理宿主机的资源</li><li>gcePersistentDisk: google 的永久磁盘</li><li>awsElasticBlockStore:</li><li>nfs:</li></ul></li><li>Persistent Volume:</li><li>Namespace:</li><li>Annotation:</li><li>ConfigMap: 配置集中化</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用命令</span></span><br><span class="line">docker ps</span><br><span class="line">docker inspect</span><br><span class="line">docker rmi -f $(docker images -qa)</span><br><span class="line"></span><br><span class="line"><span class="comment"># trouble shooting</span></span><br><span class="line"><span class="comment"># 查看系统 event </span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">kubectl logs &lt;pod-name&gt; [-c &lt;container-name&gt;]</span><br><span class="line"><span class="comment"># 查看 k8s 服务日志</span></span><br><span class="line">systemctl status kube-controller-manager -l</span><br><span class="line"><span class="comment"># 复制pod上的文件到本地</span></span><br><span class="line">kubectl <span class="built_in">cp</span> &lt;pod-name&gt;:&lt;path&gt; &lt;local-path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装插件  &lt;插件库: https://github.com/kubernetes/sample-cli-plugin &gt;</span></span><br><span class="line"><span class="comment"># 新建可执行文件，以 kubectl-&lt;name&gt; 开头，拷贝到可执行文件PATH中,即可以通过</span></span><br><span class="line">kubectl &lt;name&gt;</span><br><span class="line"><span class="comment"># 查看安装的插件</span></span><br><span class="line">kubectl plugin list</span><br><span class="line"></span><br><span class="line"><span class="comment"># Node 操作</span></span><br><span class="line">kubectl get nodes</span><br><span class="line">kubectl describe node &lt;node-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pod 操作</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl describe pod &lt;pod-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># RC 操作</span></span><br><span class="line">kubectl create -f mysql-rc.yaml</span><br><span class="line">kubectl get rc</span><br><span class="line">kubectl scale rc &lt;rc-name&gt; --replicas=4 <span class="comment">#动态扩容</span></span><br><span class="line"><span class="comment"># Deployment 操作类似于RC</span></span><br><span class="line">kubectl get rs <span class="comment"># replica set</span></span><br><span class="line">kubectl get deployments</span><br><span class="line"></span><br><span class="line"><span class="comment"># Service 操作</span></span><br><span class="line">kubectl create -f mysql-svc.yaml</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl get endpoints</span><br><span class="line">kubectl get svc &lt;service-name&gt; -o yaml <span class="comment"># 查看 Cluster IP</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">关于 k8s 的概念和常用的命令</summary>
    
    
    
    <category term="cloud" scheme="https://blog.infox.ren/categories/cloud/"/>
    
    
    <category term="work" scheme="https://blog.infox.ren/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>树莓派配置</title>
    <link href="https://blog.infox.ren/2019/11/12/raspi-setup/"/>
    <id>https://blog.infox.ren/2019/11/12/raspi-setup/</id>
    <published>2019-11-12T07:36:25.000Z</published>
    <updated>2025-01-16T14:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><ul><li>iTerm2</li><li>zsh</li></ul><p>查看已经安装的 shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells</span><br><span class="line"><span class="comment"># 修改默认shell</span></span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><ol><li>启动命令纠错功能</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"><span class="comment">## uncomment ENABLE_CORRECTION</span></span><br></pre></td></tr></table></figure><h2 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h2><ol><li><p>开启语法高亮</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/vim/vimrc .vimrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;syntax on&#x27;</span> &gt;&gt; ~/.vimrc<span class="comment">#开启语法高亮</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;inoremap jj &lt;Esc&gt;&#x27;</span> &gt;&gt; .vimrc <span class="comment">#ESC键映射成两次j键</span></span><br></pre></td></tr></table></figure></li><li><p>正常模式进入插入模式</p><p> <code>i,I,a,A,o,O,s,S</code><br> <code>i</code> 是在光标所在的字符之前插入录入的文本<br> <code>I</code> 是在光标所在行的行首插入需要录入的文本<br> <code>a</code> 是在光标所在的字符之后插入需要录入的文本<br> <code>A</code> 是在光标所在行的行尾插入需要录入的文本<br> <code>o</code> 是光标所在行的下一行行首插入需要录入的文本<br> <code>O</code> 是光标所在行的上一行行首插入需要录入的文本<br> <code>s</code> 删除光标所在处的字符然后插入需要录入的文本<br> <code>S</code> 删除光标所在行，在当前行的行首开始插入需要录入的文本<br> <code>cw</code> 是删除从光标开始到单词结束的所有字符，然后插入需要录入的文本</p></li><li><p>命令模式</p><p> <code>:set nu</code>       显示行号<br> <code>:set nonu</code>     取消行号显示<br> <code>:n</code>            定位到n行<br> <code>/&#123;目标字符串&#125;</code>   关键字查找<br> <code>:n1,n2d</code>       删除n1到n2行的内容</p><blockquote><p><a href="https://www.zhihu.com/search?type=content&q=vim">vim 操作</a></p></blockquote></li></ol><h2 id="制作树莓派镜像"><a href="#制作树莓派镜像" class="headerlink" title="制作树莓派镜像"></a>制作树莓派镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">diskutil list</span><br><span class="line">diskutil eraseDisk FAT32 RASPBERRY /dev/disk2</span><br><span class="line">diskutil unmountDisk /dev/disk2</span><br><span class="line">sudo <span class="built_in">dd</span> bs=4m <span class="keyword">if</span>=2019-09-26-raspbian-buster-lite.img of=/dev/disk2</span><br></pre></td></tr></table></figure><h2 id="安装-jdk-及服务化"><a href="#安装-jdk-及服务化" class="headerlink" title="安装 jdk 及服务化"></a>安装 jdk 及服务化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install default-jdk</span><br><span class="line">systemctl <span class="built_in">enable</span> ddns.service    <span class="comment"># enable the service</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># /etc/systemd/system/ddns.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=ddns service</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=pi</span><br><span class="line">ExecStart=/opt/ddns/ddns.jar</span><br><span class="line">SuccessExitStatus=143</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># install rust</span></span><br><span class="line">rustup install nightly</span><br><span class="line">cargo +nightly install shadowsocks-rust</span><br></pre></td></tr></table></figure><h2 id="rust-及系统-proxy-相关"><a href="#rust-及系统-proxy-相关" class="headerlink" title="rust 及系统 proxy 相关"></a>rust 及系统 proxy 相关</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">rustup self uninstall</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line"><span class="built_in">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br><span class="line"></span><br><span class="line"><span class="comment">#索引 https://docs.spring.io/spring-boot/docs/1.4.0.RC1/reference/html/deployment-install.html</span></span><br><span class="line"></span><br><span class="line">$ curl https://sh.rustup.rs -sSf | sh -s -- --<span class="built_in">help</span></span><br><span class="line">$ curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path</span><br><span class="line">$ curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly</span><br><span class="line">$ curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none</span><br><span class="line">$ curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal --default-toolchain nightly</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://rust-lang.github.io/rustup/installation/other.html</span></span><br><span class="line"></span><br><span class="line">apt proxy </span><br><span class="line"></span><br><span class="line">sudo apt-get -o Acquire::http::proxy=<span class="string">&quot;socks5h://127.0.0.1:1080/&quot;</span> install de</span><br><span class="line">fault-jdk</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">配置树莓派环境的个人备忘</summary>
    
    
    
    <category term="tool" scheme="https://blog.infox.ren/categories/tool/"/>
    
    
    <category term="work" scheme="https://blog.infox.ren/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>SSH 配置</title>
    <link href="https://blog.infox.ren/2019/10/24/ssh-guide/"/>
    <id>https://blog.infox.ren/2019/10/24/ssh-guide/</id>
    <published>2019-10-24T02:39:13.000Z</published>
    <updated>2025-01-16T14:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述如何进行 SSH 的客户端和服务端的配置，便于工作中的使用。</p><hr><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li><em>public key</em> 用于放置在 <em>target os</em> 上</li><li><em>private key</em> 放在 <em>local os</em> 上，注意安全保存。</li></ul><p>当使用 SSH client 连接 <em>target os</em> 时，target 会确定 client 有匹配的 private key，才会授权 client 访问。</p><h2 id="SSH-key-使用方式"><a href="#SSH-key-使用方式" class="headerlink" title="SSH key 使用方式"></a>SSH key 使用方式</h2><ol><li><p>本地生成 key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;xx@example.com&quot;</span> -f .ssh/vm/ms_xzard -N &#123;password&#125;</span><br></pre></td></tr></table></figure><p>生成对应的 key pair 到 <code>.ssh/vm/ms_xzard</code> folder</p></li><li><p>配置 target</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/vm/ms_xzard.pub azureuser@myserver</span><br></pre></td></tr></table></figure><p>public key copy 到 target 的 <code>~/.ssh/authorized_keys</code> 文件中，SSH 连接时 target 会通过 authorized_keys 和 client 匹配对应的私钥。</p></li><li><p>配置 client</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -K .ssh/vm/ms_xzard</span><br></pre></td></tr></table></figure><p>在 Mac OS 中，可以通过上述 -K 参数将 private key 添加到 Keychain 中。</p></li><li><p>登录 target</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh vm_name@ip</span><br></pre></td></tr></table></figure></li></ol><h2 id="检查服务端配置"><a href="#检查服务端配置" class="headerlink" title="检查服务端配置"></a>检查服务端配置</h2><p>path &#x2F;etc&#x2F;ssh&#x2F;sshd_config<br>修改配置，禁止密码登陆，强制rsa登陆</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication yes</span><br><span class="line">PasswordAuthentication no</span><br><span class="line"># Authentication 仅允许指定用户登陆</span><br><span class="line">AllowUsers &#123;&#123;user&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>service sshd restart</code></p><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><p>每次登录都要繁琐的输入 name 和 ip，我们可以通过配置 client 来简化这个操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/.ssh/config</span><br><span class="line">vim ~/.ssh/config</span><br><span class="line"><span class="comment"># edit text</span></span><br><span class="line">Host myvm</span><br><span class="line">  UseKeychain <span class="built_in">yes</span></span><br><span class="line">  AddKeysToAgent <span class="built_in">yes</span></span><br><span class="line">  Hostname ip</span><br><span class="line">  User user</span><br><span class="line">  IdentityFile ~/.ssh/vm/pi_raspberry</span><br></pre></td></tr></table></figure><p>通过以上配置，下次登录时候就可以直接键入 name 登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh myvm</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote><p><a href="https://www.ssh.com/ssh/key/">SSH official</a></p></blockquote>]]></content>
    
    
    <summary type="html">SSH 是允许电脑之间进行通讯的常用加密协议，认真记录下它的应用场景。</summary>
    
    
    
    <category term="tool" scheme="https://blog.infox.ren/categories/tool/"/>
    
    
    <category term="work" scheme="https://blog.infox.ren/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>高效工作的 Mac 环境配置</title>
    <link href="https://blog.infox.ren/2019/04/19/mac-os-setup/"/>
    <id>https://blog.infox.ren/2019/04/19/mac-os-setup/</id>
    <published>2019-04-19T07:30:52.000Z</published>
    <updated>2025-01-16T14:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>工欲善其事，必先利其器</strong></em></p><p>作为一个喜欢追求完美的程序猿，电脑是需要武装到牙齿的装备，遂以此文记录电脑的配置。</p><hr><h2 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h2><p>Mac 系统的快捷键映射</p><table><thead><tr><th align="center">Symbol</th><th align="center">Key</th></tr></thead><tbody><tr><td align="center">⌘</td><td align="center">Command Key</td></tr><tr><td align="center">⌥</td><td align="center">Option Key</td></tr><tr><td align="center">⌃</td><td align="center">Control Key</td></tr><tr><td align="center">⇧</td><td align="center">Shift Key</td></tr></tbody></table><h3 id="功能键"><a href="#功能键" class="headerlink" title="功能键"></a>功能键</h3><p>默认情况下，Mac 中 <em><strong>F1-F12</strong></em> 都是特殊功能，比如调节屏幕亮度。而当你需要键入 <em><strong>F1-F12</strong></em> 时（比如在使用 IntelliJ IDEA 的快捷键时），需要同时按住 <em><strong>fn</strong></em>。</p><p>把 <em><strong>F1-F12</strong></em> 改成标准功能键：选择<code>System Preferences</code> &gt; <code>Keyboard</code>，在<code>Keyboard</code>标签页中选中 Touch Bar shows <code>F1, F2, etc. keys</code></p><h3 id="Spotlight-快捷键"><a href="#Spotlight-快捷键" class="headerlink" title="Spotlight 快捷键"></a>Spotlight 快捷键</h3><p>如果安装有 <em><strong>Alfred</strong></em>，建议 Spotlight 快捷键禁用，直接设置 Alfred 快捷键为 <code>⌘Space</code>。</p><h3 id="输入法快捷键"><a href="#输入法快捷键" class="headerlink" title="输入法快捷键"></a>输入法快捷键</h3><p>一般来说切换输入法的快捷键是<code>⌥Space</code>，建议禁用，只保留 <code>Caps lock</code> 作为中英文切换。</p><h3 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h3><p>让双手尽量多的键盘和快捷键，少使用鼠标和触摸板，可以大大提高效率。</p><ul><li><p><a href="https://support.apple.com/kb/HT201236">Mac keyboard shortcts</a></p><p>苹果官方文档。当你在写代码，怎么通过快捷键让光标转移到行首、行尾、向上翻页或者将光标移左移一个词？都在这篇文档里。</p></li><li><p><a href="https://support.apple.com/kb/HT204434">Mac keyboard shortcuts for accessibility features</a></p><p>苹果官方文档。回车触发蓝底按钮，空格触发蓝边按钮，都出自这里。</p></li></ul><h3 id="设置-Trackpad-轻点来点按"><a href="#设置-Trackpad-轻点来点按" class="headerlink" title="设置 Trackpad 轻点来点按"></a>设置 Trackpad 轻点来点按</h3><p>默认情况下按下触摸板才是点按（click）。我喜欢设置成用轻点作为点按：</p><p>选择<code>System Preferences</code> &gt; <code>Trackpad</code>，在<code>Point &amp; Click</code>标签页中选中<code>Tap to click</code>。</p><h2 id="三指拖拽"><a href="#三指拖拽" class="headerlink" title="三指拖拽"></a>三指拖拽</h2><p>选择<code>System Preferences</code> &gt; <code>Accessibility</code>, 在<code>Trackpad Options</code>标签中 Enable dragging <code>three finger drag</code>。</p><p><img src="/../images/mac_os_setup/system-three-finger-drag.png" alt="三指拖拽设置"></p><h3 id="语音"><a href="#语音" class="headerlink" title="语音"></a>语音</h3><p>macOS 自带了语音功能，可以用<code>say</code>命令让 Mac 开口说话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say hello</span><br></pre></td></tr></table></figure><p>可以和<code>&amp;&amp;</code>或者<code>;</code>配合使用来提示你某任务已经完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup ; say mission complete</span><br></pre></td></tr></table></figure><p>通过命令行来听取发音还是有点麻烦。其实我们几乎可以在任何地方选中单词，然后使用快捷键<code>⌥+ESC</code>发音。仅仅需要这样设置一下：选择<code>System Preferences</code> &gt; <code>Accessibility</code> &gt; <code>Spoken Content</code>，在页面中选中<code>Speak selection</code>。</p><h3 id="Dock-Position"><a href="#Dock-Position" class="headerlink" title="Dock Position"></a>Dock Position</h3><p>默认 Dock 在屏幕下方。我们的屏幕一般都是 16:10，Dock 在屏幕下方的话会占据本来就不大的垂直空间。建议把 Dock 放到左边或者右边。</p><hr><h3 id="Remove-all-Dock-icons-OCD"><a href="#Remove-all-Dock-icons-OCD" class="headerlink" title="Remove all Dock icons[OCD]"></a>Remove all Dock icons[OCD]</h3><p>本条目对于强迫症适用。</p><p>默认情况下 Dock 被一堆系统自带的应用占据着，而其中大部分我都很少使用，当我打开几个常用应用后，Dock 上会有很多图标，每个图标都会被挤得很小。所以我会把所有 Dock 上固定的图标都删掉，这样一来 Dock 上只有我打开的应用。</p><p>PS：Finder 图标是删不掉的。</p><p>除了一个一个删除图标，也可以通过这个命令来隐藏所有的固定图标：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock static-only -boolean <span class="literal">true</span>; killall Dock</span><br></pre></td></tr></table></figure><p>恢复也非常简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults delete com.apple.dock static-only; killall Dock</span><br></pre></td></tr></table></figure><p>PS：使用这个方法的话，Dock 上的<code>Downloads</code>也会被隐藏掉。</p><h3 id="重置-Launchpad-上图标位置-OCD"><a href="#重置-Launchpad-上图标位置-OCD" class="headerlink" title="重置 Launchpad 上图标位置[OCD]"></a>重置 Launchpad 上图标位置[OCD]</h3><p>本条目对于强迫症适用。</p><p>新的应用被安装后，经常会跑到 Launchpad 的第一屏，所以它们的位置跟安装的顺序有关系，而我更希望它们可以按照某种更加稳定的顺序排列，比如按照系统默认的顺序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock ResetLaunchPad -bool <span class="literal">true</span>; killall Dock</span><br></pre></td></tr></table></figure><p>在默认顺序中，Launchpad 第一屏只有 Apple 自家应用。</p><h3 id="创建大小写敏感的工作区"><a href="#创建大小写敏感的工作区" class="headerlink" title="创建大小写敏感的工作区"></a>创建大小写敏感的工作区</h3><p>在多人合作的项目开发时，因为 Mac 文件系统默认是大小写不敏感的，所以经常会出现一些诡异的问题。创建一个大小写敏感的工作区（workspace）来解决避免这些问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdiutil create -<span class="built_in">type</span> SPARSE -fs <span class="string">&#x27;Case-sensitive Journaled HFS+&#x27;</span> -size 100g -volname workspace ~/Documents/workspace.dmg.sparseimage</span><br></pre></td></tr></table></figure><p>可以通过三种方式挂载镜像：</p><ol><li>直接双击打开 <code>~/Documents/workspace.dmg.sparseimage</code></li><li><code>open ~/Documents/workspace.dmg.sparseimage</code></li><li><code>hdiutil attach ~/Documents/workspace.dmg.sparseimage</code></li></ol><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><p>本节介绍一些常用的，跟开发没有直接关系的第三方应用及其设置。</p><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><a href="http://brew.sh/">Homebrew</a></h3><p>包管理工具，官方称之为<code>The missing package manager for macOS</code>。</p><p>安装步骤见官网。</p><p>PS：安装 brew 的时候会自动下载和安装 Apple 的 Command Line Tools。</p><h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a><a href="https://www.iterm2.com/">iTerm2</a></h3><p>iTerm2 是最常用的终端应用，是 Terminal 应用的替代品。提供了诸如<code>Split Panes</code>等<a href="https://www.iterm2.com/features.html">一群实用特性</a>。它默认的黑色背景让我毫不犹豫的抛弃了 Terminal。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install iterm2</span><br></pre></td></tr></table></figure><p>感谢 brew，我们可以通过命令行自动安装 iTerm2 了。</p><p>在终端里，除了可以用<code>⌃E</code>等快捷键（详见<a href="#%E5%85%B6%E4%BB%96%E5%BF%AB%E6%8D%B7%E9%94%AE">其他快捷键</a>）之外，还可以使用<code>⌥B</code>、<code>⌥F</code>等快捷键（具体可以参考<a href="http://ss64.com/bash/syntax-keyboard.html">这里</a>）。前提是这样设置一下：</p><p>选择<code>Iterm</code>菜单 &gt; <code>Preferences</code> &gt; <code>Profiles</code>，选择你在使用的 Profile（默认是<code>Default</code>），在<code>Keys</code>标签页中把<code>Left option (⌥) key acts as</code>和<code>Right option (⌥) key acts as</code>都设置成<code>+ESC</code>。</p><p>在打开新的窗口&#x2F;标签页的时候，默认情况下新窗口总是 HOME 目录，还需要我每次敲命令才能进入工作目录。如果想要这个新窗口在打开的时候就自动进入工作目录，需要如下设置：</p><p>选择<code>Iterm</code>菜单 &gt; <code>Preferences</code> &gt; <code>Profiles</code>，选择你在使用的 Profile（默认是Default），在<code>General</code>标签页中的<code>Working Directory</code>部分中选择<code>Reuse previous seesion&#39;s directory</code>。</p><p>至此，Terminal 应用已经出色的完成了其历史使命。后面命令行就交给 iTerm2 啦。</p><p>在 iTerm2 中双击会自动选中对应的词，三击会选中对应的整行。选中的内容会自动进入剪贴板，不需要再按<code>⌘C</code>复制。</p><h3 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh My Zsh"></a><a href="http://ohmyz.sh/">Oh My Zsh</a></h3><p>默认的 Bash 是黑白的，没有色彩。而 Oh My Zsh 可以带你进入彩色时代。Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。后面我们会看到很多介绍，你会看到我爱死这家伙了。</p><p>安装方法见官网。</p><p>目前我使用的插件有：<code>git z history ssh-agent</code></p><p>Oh My Zsh 使用了 Z shell（zsh），一个和 Bash 相似的 Shell，而非 Bash。</p><p>在 Z shell 中，<code>~/.zshrc</code>是最重要的配置文件。Oh My Zsh 在安装的时候会把当前环境的<code>$PATH</code>写入<code>~/.zshrc</code>中。这并不是我期望的行为，因为使用了 brew，我们基本不再需要去定制<code>$PATH</code>，而 Oh My Zsh 提供的默认<code>$PATH</code>值<code>$HOME/bin:/usr/local/bin:$PATH</code>是非常合适的一个值，它把<code>$HOME/bin</code>加入了<code>$PATH</code>，可以让我们把自己用的脚本放到<code>$HOME/bin</code>下。</p><p>所以建议把<code>~/.zshrc</code>重置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><p>Oh My Zsh 还有很多<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview">有价值的插件</a>。</p><h3 id="Git-常用别名"><a href="#Git-常用别名" class="headerlink" title="Git 常用别名"></a>Git 常用别名</h3><p>几乎每个人都会使用一些方法比如 Git 别名来提高效率，几乎所有人都会把使用<code>git st</code>来代替<code>git status</code>。然而这需要手动设置，每个人也都不完全一样。</p><p>Oh My Zsh 提供了一套系统别名（alias），来达到相同的功能。比如<code>gst</code>作为<code>git status</code>的别名。而且 Git 插件是 Oh My Zsh 默认启用的，相当于你使用了 Oh My Zsh，你就拥有了一套高效率的别名，而且还是全球通用的。是不是棒棒哒？下面是一些我常用的别名：</p><table><thead><tr><th>Alias</th><th>Command</th></tr></thead><tbody><tr><td>gapa</td><td><code>git add --patch</code></td></tr><tr><td>gc!</td><td><code>git commit -v --amend</code></td></tr><tr><td>gcl</td><td><code>git clone --recurse-submodules</code></td></tr><tr><td>gclean</td><td><code>git clean -id</code></td></tr><tr><td>gcm</td><td><code>git checkout master</code></td></tr><tr><td>gcmsg</td><td><code>git commit -m</code></td></tr><tr><td>gco</td><td><code>git checkout</code></td></tr><tr><td>gd</td><td><code>git diff</code></td></tr><tr><td>gdca</td><td><code>git diff --cached</code></td></tr><tr><td>glola</td><td><code>git log --graph --pretty=&#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --al</code></td></tr><tr><td>gp</td><td><code>git push</code></td></tr><tr><td>grbc</td><td><code>git rebase --continue</code></td></tr><tr><td>gst</td><td><code>git status</code></td></tr><tr><td>gup</td><td><code>git pull --rebase</code></td></tr><tr><td>gwip</td><td><code>git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit --no-verify --no-gpg-sign -m &quot;--wip-- [skip ci]&quot;</code></td></tr></tbody></table><p>完整列表请参考 <a href="https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/git/README.md">快捷键</a></p><h3 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h3><p>原生 macOS 下只能手动调整窗口大小，所以我们需要窗口管理工具。个人习惯使用 Rectangle.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install rectangle</span><br></pre></td></tr></table></figure><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><p>Visual Studio Code 是文本编辑工具。由于各种各样的插件，可以满足日常的各种需求。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install visual-studio-code</span><br></pre></td></tr></table></figure><p>常用插件有 markdown-preview-enhanced, git 插件等。</p><h3 id="z"><a href="#z" class="headerlink" title="z"></a>z</h3><p>在打开终端后，你是怎么进入项目的工作目录？是<code>cd xxx</code>，<code>⌃R</code>还是用别名？</p><p><a href="https://github.com/rupa/z">z</a> 工具可以帮你快速进入目录。</p><p>这货的安装非常方便，甚至都不需要下载任何东西，因为它已经整合在了 Oh My Zsh 中。编辑<code>~/.zshrc</code>文件，在<code>plugins=(git)</code>这行中加上<code>z</code>变成<code>plugins=(git z)</code>，然后运行<code>source ~/.zshrc</code>重新加载配置文件，就可以使用 z 了。</p><h3 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a><a href="https://vimium.github.io/">Vimium</a></h3><p>Vimium 是一个 Google Chrome 扩展，让你可以纯键盘操作 Chrome，把你的 Chrome 变成“黑客的浏览器”。</p><p>安装方法请参考官方网站。</p><p>其他浏览器也有类似的工具，比如 FireFox 的 <a href="https://github.com/mooz/keysnail">KeySnail</a>。</p><h3 id="CheatSheet"><a href="#CheatSheet" class="headerlink" title="CheatSheet"></a><a href="http://www.mediaatelier.com/CheatSheet/">CheatSheet</a></h3><p>CheatSheet 能够显示当前程序的快捷键列表，默认的快捷键是长按<code>⌘</code>。</p><p><img src="/../images/mac_os_setup/cheatsheet_main.png" alt="CheatSheet"></p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cheatsheet</span><br></pre></td></tr></table></figure><h3 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a><a href="https://www.alfredapp.com/">Alfred</a></h3><p>Mac 用户不用鼠标键盘的必备神器，配合大量 Workflows，习惯之后可以大大减少操作时间。</p><p>上手简单，调教成本在后期自定义 Workflows，不过有大量雷锋使用者提供的现成扩展，访问<a href="http://www.alfredworkflow.com/">这里</a>挑选喜欢的，并可以极其简单地根据自己的需要修改。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install alfred</span><br></pre></td></tr></table></figure><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>macOS 都不会自带 JDK 了，所以进行 Java 开发的话，需要下载 JDK。</p><p>JDK 安装文件是 pkg 格式，卸载和<code>.app</code>不一样，且没有自动卸载方式。</p><p>而 brew 提供了自动安装和卸载功能，能够自动从官网上下载并安装最新的 JDK。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openjdk@17</span><br></pre></td></tr></table></figure><p>在 macOS 上，你可以同时安装多个版本的 JDK。你可以通过命令<code>/usr/libexec/java_home -V</code>来查看安装了哪几个 JDK。</p><p>那问题来了，当你运行<code>java</code>或者 Java 程序时使用的是哪个 JDK 呢？在 macOS 下，<code>java</code>也就是<code>/usr/bin/java</code>在默认情况下指向的是已经安装的最新版本。但是你可以设置环境变量<code>JAVA_HOME</code>来更改其指向：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_60&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</span><br><span class="line">$ JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home java -version</span><br><span class="line">java version <span class="string">&quot;1.6.0_65&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)</span><br></pre></td></tr></table></figure><p>其中<code>JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</code>可以用<code>JAVA_HOME=$(/usr/libexec/java_home -v 11)</code>这种更加通用的方式代替。</p><ul><li>brew install jdk can’t be IDEA detected</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -sf /usr/local/opt/openjdk@21/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-21.jdk</span><br></pre></td></tr></table></figure><h3 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h3><p>Java 开发必备工具 IntelliJ IDEA。可以安装 Ultimate Edition：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install intellij-idea</span><br></pre></td></tr></table></figure><h2 id="系统必备工具"><a href="#系统必备工具" class="headerlink" title="系统必备工具"></a>系统必备工具</h2><h3 id="flux"><a href="#flux" class="headerlink" title="flux"></a><a href="https://justgetflux.com/">flux</a></h3><p>  帮助你保护自己眼睛，动态调节电脑显示效果</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install flux</span><br></pre></td></tr></table></figure><h3 id="iina"><a href="#iina" class="headerlink" title="iina"></a><a href="https://iina.io/">iina</a></h3><p>  简洁的 mac media player。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install iina</span><br></pre></td></tr></table></figure><h3 id="iTerm2-sudo"><a href="#iTerm2-sudo" class="headerlink" title="iTerm2 sudo"></a>iTerm2 sudo</h3><p>  每次在 iTerm2 中输入 <code>sudo</code> 命令时都需要输入密码，这个操作对于有touchId的机器来说有些繁琐，规避下</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&quot;.bak&quot;</span> <span class="string">&#x27;2s/^/auth       sufficient     pam_tid.so\&#x27;</span>$<span class="string">&#x27;\n/g&#x27;</span> /etc/pam.d/sudo</span><br><span class="line"><span class="comment">### 恢复操作</span></span><br><span class="line">sudo <span class="built_in">mv</span> /etc/pam.d/sudo.bak /etc/pam.d/sudo</span><br></pre></td></tr></table></figure><p>  说明：该命令主要是在sudo认证前加入TouchId的认证模块。在使用 iTerm2 时还需要 <em>iTerm 需要进入设置，Advanced ，搜索 sudo ，把选项值改为 no</em>。</p><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> .DS_Store &gt;&gt; ~/.gitignore_global</span><br><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://github.com/macdao/ocds-guide-to-setting-up-mac#%E5%BC%BA%E8%BF%AB%E7%97%87%E7%9A%84-mac-%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%8D%97">ocds-guide-to-setting-up-mac</a></p></blockquote>]]></content>
    
    
    <summary type="html">使用 Mac OS 时我个人需要设置的一些常用配置和个人提高工作效率的软件</summary>
    
    
    
    <category term="os" scheme="https://blog.infox.ren/categories/os/"/>
    
    
    <category term="work" scheme="https://blog.infox.ren/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>SQL 日常</title>
    <link href="https://blog.infox.ren/2019/04/19/sql/"/>
    <id>https://blog.infox.ren/2019/04/19/sql/</id>
    <published>2019-04-19T07:30:52.000Z</published>
    <updated>2025-01-16T14:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>不积硅步，无以至千里</strong></em></p><p>多为 Mysql 的一些 SQL 使用技巧</p><hr><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 备份表结构语句</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> bbb_bkp <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> bbb  <span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE name_xxx;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE name_xxx <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE name_xxx <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SQL 日常工作留备</summary>
    
    
    
    <category term="tech" scheme="https://blog.infox.ren/categories/tech/"/>
    
    
    <category term="work" scheme="https://blog.infox.ren/tags/work/"/>
    
  </entry>
  
</feed>
